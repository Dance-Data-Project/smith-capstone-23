"//Return//ReturnData//IRS990ScheduleD//CYMinus4YrEndwmtFundGrp//ContributionsAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus4YrEndwmtFundGrp//InvestmentEarningsOrLossesAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus4YrEndwmtFundGrp//OtherExpendituresAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus4YrEndwmtFundGrp//EndYearBalanceAmt",
"//Return//ReturnData//IRS990ScheduleD//BoardDesignatedBalanceEOYPct",
"//Return//ReturnData//IRS990ScheduleD//PrmnntEndowmentBalanceEOYPct",
"//Return//ReturnData//IRS990ScheduleD//TermEndowmentBalanceEOYPct",
"//Return//ReturnData//IRS990ScheduleD//EndowmentsHeldUnrelatedOrgInd",
"//Return//ReturnData//IRS990ScheduleD//EndowmentsHeldRelatedOrgInd",
"//AmendedReturnInd",
"//Return//ReturnHeader//ReturnTypeCd"
)
# Column name; order matters, needs to align with retrieval order
variables_no_path <- c("ReturnTs",
"EIN",
"TaxPeriodBeginDt",
"TaxPeriodEndDt",
"DonorRstrOrQuasiEndowmentsInd",
"CYBeginningYearBalanceAmt",
"CYContributionsAmt",
"CYInvestmentEarningsOrLossesAmt",
"CYOtherExpendituresAmt",
"CYEndYearBalanceAmt",
"CYM1BeginningYearBalanceAmt",
"CYM1ContributionsAmt",
"CYM1InvestmentEarningsOrLossesAmt",
"CYM1OtherExpendituresAmt",
"CYM1EndYearBalanceAmt",
"CYM2BeginningYearBalanceAmt",
"CYM2ContributionsAmt",
"CYM2InvestmentEarningsOrLossesAmt",
"CYM2OtherExpendituresAmt",
"CYM2EndYearBalanceAmt",
"CYM3BeginningYearBalanceAmt",
"CYM3ContributionsAmt",
"CYM3InvestmentEarningsOrLossesAmt",
"CYM3OtherExpendituresAmt",
"CYM3EndYearBalanceAmt",
"CYM4BeginningYearBalanceAmt",
"CYM4ContributionsAmt",
"CYM4InvestmentEarningsOrLossesAmt",
"CYM4OtherExpendituresAmt",
"CYM4EndYearBalanceAmt",
"BoardDesignatedBalanceEOYPct",
"PrmnntEndowmentBalanceEOYPct",
"TermEndowmentBalanceEOYPct",
"EndowmentsHeldUnrelatedOrgInd",
"EndowmentsHeldRelatedOrgInd",
"AmendedReturnInd",
"ReturnTypeCd"
)
xml_file <- read_xml(filename)
xml_file <- xml_ns_strip(xml_file)
# extract each variable; if it isn't present, put NA
extracted <- map(variables, ~{
value <- xml_find_all(
xml_file,
xpath =.x)
value <- ifelse(length(value) ==0,
NA,
xml_text(value)) })
names(extracted) <- variables_no_path
# check how many of the entries are NA
# if all NA, prefix 'irs:' may be needed
columns_not_na <- map_dbl(as.data.frame(extracted), ~!is.na(.x)) %>% sum()
# handle case where prefix 'irs' is in front
if(columns_not_na == 0){
extracted <- map(variables_no_path, ~ {
value <- xml_find_all(xml_file,
xpath = paste0("//irs:", .x))
value <- ifelse(length(value) ==0,
NA,
xml_text(value)) })
names(extracted) <- variables_no_path
extracted <- extracted %>%
as_tibble()
}
extracted <- extracted %>%
as_tibble()
}
#' @param filename string containing full path to xml file to be read
##Based off of Quinn's strategy to extract metadata
get_endowment_old <- function(filename) {
# Retrieving the same endowment information for all
variables <- c("//Return//ReturnHeader//ReturnTs",
"//Return//ReturnHeader//Filer//EIN",
"//Return//ReturnHeader//TaxPeriodBeginDt",
"//Return//ReturnHeader//TaxPeriodEndDt",
"//Return//ReturnData//IRS990//DonorRstrOrQuasiEndowmentsInd",
"//Return//ReturnData//IRS990ScheduleD//CYEndwmtFundGrp//BeginningYearBalanceAmt",
"//Return//ReturnData//IRS990ScheduleD//CYEndwmtFundGrp//ContributionsAmt",
"//Return//ReturnData//IRS990ScheduleD//CYEndwmtFundGrp//InvestmentEarningsOrLossesAmt",
"//Return//ReturnData//IRS990ScheduleD//CYEndwmtFundGrp//OtherExpendituresAmt",
"//Return//ReturnData//IRS990ScheduleD//CYEndwmtFundGrp//EndYearBalanceAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus1YrEndwmtFundGrp//BeginningYearBalanceAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus1YrEndwmtFundGrp//ContributionsAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus1YrEndwmtFundGrp//InvestmentEarningsOrLossesAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus1YrEndwmtFundGrp//OtherExpendituresAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus1YrEndwmtFundGrp//EndYearBalanceAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus2YrEndwmtFundGrp//BeginningYearBalanceAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus2YrEndwmtFundGrp//ContributionsAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus2YrEndwmtFundGrp//InvestmentEarningsOrLossesAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus2YrEndwmtFundGrp//OtherExpendituresAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus2YrEndwmtFundGrp//EndYearBalanceAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus3YrEndwmtFundGrp//BeginningYearBalanceAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus3YrEndwmtFundGrp//ContributionsAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus3YrEndwmtFundGrp//InvestmentEarningsOrLossesAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus3YrEndwmtFundGrp//OtherExpendituresAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus3YrEndwmtFundGrp//EndYearBalanceAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus4YrEndwmtFundGrp//BeginningYearBalanceAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus4YrEndwmtFundGrp//ContributionsAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus4YrEndwmtFundGrp//InvestmentEarningsOrLossesAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus4YrEndwmtFundGrp//OtherExpendituresAmt",
"//Return//ReturnData//IRS990ScheduleD//CYMinus4YrEndwmtFundGrp//EndYearBalanceAmt",
"//Return//ReturnData//IRS990ScheduleD//BoardDesignatedBalanceEOYPct",
"//Return//ReturnData//IRS990ScheduleD//PrmnntEndowmentBalanceEOYPct",
"//Return//ReturnData//IRS990ScheduleD//TermEndowmentBalanceEOYPct",
"//Return//ReturnData//IRS990ScheduleD//EndowmentsHeldUnrelatedOrgInd",
"//Return//ReturnData//IRS990ScheduleD//EndowmentsHeldRelatedOrgInd",
"//AmendedReturnInd",
"//Return//ReturnHeader//ReturnTypeCd"
)
# Column name; order matters, needs to align with retrieval order
variables_no_path <- c("ReturnTs",
"EIN",
"TaxPeriodBeginDt",
"TaxPeriodEndDt",
"DonorRstrOrQuasiEndowmentsInd",
"CYBeginningYearBalanceAmt",
"CYContributionsAmt",
"CYInvestmentEarningsOrLossesAmt",
"CYOtherExpendituresAmt",
"CYEndYearBalanceAmt",
"CYM1BeginningYearBalanceAmt",
"CYM1ContributionsAmt",
"CYM1InvestmentEarningsOrLossesAmt",
"CYM1OtherExpendituresAmt",
"CYM1EndYearBalanceAmt",
"CYM2BeginningYearBalanceAmt",
"CYM2ContributionsAmt",
"CYM2InvestmentEarningsOrLossesAmt",
"CYM2OtherExpendituresAmt",
"CYM2EndYearBalanceAmt",
"CYM3BeginningYearBalanceAmt",
"CYM3ContributionsAmt",
"CYM3InvestmentEarningsOrLossesAmt",
"CYM3OtherExpendituresAmt",
"CYM3EndYearBalanceAmt",
"CYM4BeginningYearBalanceAmt",
"CYM4ContributionsAmt",
"CYM4InvestmentEarningsOrLossesAmt",
"CYM4OtherExpendituresAmt",
"CYM4EndYearBalanceAmt",
"BoardDesignatedBalanceEOYPct",
"PrmnntEndowmentBalanceEOYPct",
"TermEndowmentBalanceEOYPct",
"EndowmentsHeldUnrelatedOrgInd",
"EndowmentsHeldRelatedOrgInd",
"AmendedReturnInd",
"ReturnTypeCd"
)
xml_file <- read_xml(filename)
xml_file <- xml_ns_strip(xml_file)
# extract each variable; if it isn't present, put NA
extracted <- map(variables, ~{
value <- xml_find_all(
xml_file,
xpath =.x)
value <- ifelse(length(value) ==0,
NA,
xml_text(value)) })
names(extracted) <- variables_no_path
extracted <- extracted %>%
as_tibble()
}
##Applying get_endowment to entire output
files <- dir(here("ballet_990_released_20230208"),
full.names = TRUE)
##################################################################
# simple R script to knit all Rmarkdown file and generate outputs
# in the output_html directory within each file
##################################################################
library(rmarkdown)
library(here)
library(tibble)
# Infrastructure folder
files <- tibble(full = dir(here("infrastructure_rmds"),
full.names = TRUE),
partial = dir(here("infrastructure_rmds")))
# Infrastructure folder
files <- tibble(full = dir(here("infrastructure_rmds"),
full.names = TRUE),
partial = dir(here("infrastructure_rmds")))
library(here)
library(tibble)
# Infrastructure folder
files <- tibble(full = dir(here("infrastructure_rmds"),
full.names = TRUE),
partial = dir(here("infrastructure_rmds")))
output <- here("infrastructure_rmds", "output_html")
# order files to account for dependencies
# filter_out_filings depends on output of load_wrangle_filter
files_ordered <- tibble(partial = c(
"load_wrangle_filter_data.Rmd",
"loading_error_test.Rmd",
"filter_out_filings.Rmd",
"handle_discrepancies.Rmd",
"howto_get_vars.Rmd",
"data_dictionary.Rmd")) %>%
left_join(files)
##################################################################
# simple R script to knit all Rmarkdown file and generate outputs
# in the output_html directory within each file
##################################################################
library(rmarkdown)
library(here)
library(tibble)
# Infrastructure folder
files <- tibble(full = dir(here("infrastructure_rmds"),
full.names = TRUE),
partial = dir(here("infrastructure_rmds")))
##################################################################
# simple R script to knit all Rmarkdown file and generate outputs
# in the output_html directory within each file
##################################################################
library(rmarkdown)
library(here)
library(tibble)
# Infrastructure folder
files <- tibble(full = dir(here::here("infrastructure_rmds"),
full.names = TRUE),
partial = dir(here::here("infrastructure_rmds")))
output <- here("infrastructure_rmds", "output_html")
##################################################################
# simple R script to knit all Rmarkdown file and generate outputs
# in the output_html directory within each file
##################################################################
library(rmarkdown)
library(here)
library(tibble)
here <- here::here
# Infrastructure folder
files <- tibble(full = dir(here::here("infrastructure_rmds"),
full.names = TRUE),
partial = dir(here::here("infrastructure_rmds")))
output <- here::here("infrastructure_rmds", "output_html")
# order files to account for dependencies
# filter_out_filings depends on output of load_wrangle_filter
files_ordered <- tibble(partial = c(
"load_wrangle_filter_data.Rmd",
"loading_error_test.Rmd",
"filter_out_filings.Rmd",
"handle_discrepancies.Rmd",
"howto_get_vars.Rmd",
"data_dictionary.Rmd")) %>%
left_join(files)
files <- files_ordered$full
for (i in files) {
print(i)
if(grepl(".Rmd", i)){render(i, output_dir = output, knit_root_dir=here())}
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(xml2)
library(rvest)
library(kableExtra)
library(here)
# sort variables by the number of files that have a given variable
# include parent variable for ease of interpretation
vars_count<-all_vars %>%
rename(Variable = variables) %>%
group_by(Variable) %>%
# number of files that have each variable
summarize(files = n()) %>%
# split variable paths
#second to last element is parent, last element is variable
mutate(Variable = strsplit(Variable, split = "/"),
Parent = map_chr(Variable, ~.x[length(.x)-1]),
Variable = map_chr(Variable, ~.x[length(.x)])) %>%
select(Parent, Variable, `Number of Files` = files ) %>%
arrange(desc(`Number of Files`))
# sort variables by the number of files that have a given variable
# include parent variable for ease of interpretation
vars_count<-all_vars %>%
rename(Variable = variables) %>%
group_by(Variable) %>%
# number of files that have each variable
summarise(files = n()) %>%
# split variable paths
#second to last element is parent, last element is variable
mutate(Variable = strsplit(Variable, split = "/"),
Parent = map_chr(Variable, ~.x[length(.x)-1]),
Variable = map_chr(Variable, ~.x[length(.x)])) %>%
select(Parent, Variable, `Number of Files` = files ) %>%
arrange(desc(`Number of Files`))
##################################################################
# simple R script to knit all Rmarkdown file and generate outputs
# in the output_html directory within each file
##################################################################
library(rmarkdown)
library(here)
library(tibble)
here <- here::here
# Infrastructure folder
files <- tibble(full = dir(here::here("infrastructure_rmds"),
full.names = TRUE),
partial = dir(here::here("infrastructure_rmds")))
output <- here::here("infrastructure_rmds", "output_html")
# order files to account for dependencies
# filter_out_filings depends on output of load_wrangle_filter
files_ordered <- tibble(partial = c(
"load_wrangle_filter_data.Rmd",
"loading_error_test.Rmd",
"filter_out_filings.Rmd",
"handle_discrepancies.Rmd",
"howto_get_vars.Rmd",
"data_dictionary.Rmd")) %>%
left_join(files)
files <- files_ordered$full
for (i in files) {
print(i)
if(grepl(".Rmd", i)){render(i, output_dir = output, knit_root_dir=here())}
}
# exploration folder
files <- dir(here("explorations_rmds"),
full.names = TRUE)
files <- files[files != "410uplabor.Rmd"]
output <- here("explorations_rmds", "output_html")
for (i in files) {
if(grepl(".Rmd", i)) { render(i, output_dir = output,  knit_root_dir=here())}
}
ruthdata2019%>%
summarize(min=min(uplaborrankdif),
max = max(uplaborrankdif),
median = median(uplaborrankdif),
mean= mean(uplaborrankdif))
crossref <- check_variable("BeginningYearBalanceAmt", data = endowment_data)
# plot fraction where there was a difference between
# the reports by year
crossref %>%
select(EIN, contains("difference")) %>%
pivot_longer(cols = contains("difference")) %>%
filter(!is.na(value)) %>%
group_by(name)  %>%
summarize(number_zeros = sum(ifelse(value == 0, 1,0)),
total_reports = n(),
fraction = 1-( number_zeros / total_reports)) %>%
mutate(name = gsub("difference_in_reported_year", "", name)) %>%
ggplot(aes(x=name, y = fraction)) +
geom_bar(stat ="identity", fill = "#234A77") +
geom_label(aes(label = round(fraction,2))) +
labs(title = paste0("Fraction of Differences that Were Nonzero\n",
"Between Cross Referenced Reports"),
subtitle = "By Year",
x = "Years Between Reports Compared",
y = "Fraction with Nonzero Difference") +
theme_bw() +
theme(plot.title = element_text(hjust = .5, face="bold"),
plot.subtitle = element_text(hjust = .5, face="italic"))
# plot fraction where there was a difference between
# the reports by year
crossref %>%
select(EIN, contains("difference")) %>%
pivot_longer(cols = contains("difference")) %>%
filter(!is.na(value)) %>%
group_by(name)  %>%
summarise(number_zeros = sum(ifelse(value == 0, 1,0)),
total_reports = n(),
fraction = 1-( number_zeros / total_reports)) %>%
mutate(name = gsub("difference_in_reported_year", "", name)) %>%
ggplot(aes(x=name, y = fraction)) +
geom_bar(stat ="identity", fill = "#234A77") +
geom_label(aes(label = round(fraction,2))) +
labs(title = paste0("Fraction of Differences that Were Nonzero\n",
"Between Cross Referenced Reports"),
subtitle = "By Year",
x = "Years Between Reports Compared",
y = "Fraction with Nonzero Difference") +
theme_bw() +
theme(plot.title = element_text(hjust = .5, face="bold"),
plot.subtitle = element_text(hjust = .5, face="italic"))
# stacked chart, note we can't see how nonzero counts are changing
# relative to the total counts
crossref %>%
select(EIN, contains("difference"), fiscal_year) %>%
pivot_longer(cols = contains("difference")) %>%
filter(!is.na(value)) %>%
group_by(name)  %>%
summarize(zero = sum(ifelse(value == 0, 1,0)),
nonzero = sum(ifelse(value == 0, 0,1))) %>%
# notice each row represents a fiscal_year-EIN-difference_type
pivot_longer(cols = c(zero, nonzero),
names_to = "source",
values_to = "count") %>%
mutate(name = gsub("difference_in_reported_year", "", name),
source = ifelse(source == "nonzero",
"Nonzero Difference",
"Zero Difference")) %>%
ggplot(aes(x=name, y = count, fill = source)) +
geom_bar(stat ="identity", position = "stack", alpha = .8) +
geom_label(aes(label = round(count,3), y = count, color = source),
position = "stack",
size = 2.6,
label.padding = unit(.1, "lines"),
fill = "white",
fontface="bold",
show.legend = FALSE) +
labs(title = "Number of Zero and Nonzero Differences\nBetween Cross Referenced Reports",
subtitle = "By Year",
x = "Years Between Reports Compared",
y = "Count",
fill = "") +
theme_bw() +
theme(plot.title = element_text(size = 16, hjust = .5, face="bold"),
plot.subtitle = element_text(hjust = .5, face="italic"),
axis.text.x = element_text(size = 13),
axis.title = element_text(size = 16, face = "bold"))
# difference represents What They Reported as CY Minus X Years - What They Reported at The Time
companies_different <- crossref %>%
pivot_longer(cols = contains("difference")) %>%
select(EIN, fiscal_year, name, value) %>%
filter(value != 0) %>%
left_join(companies_to_ein, by = c("EIN" = "EIN")) %>%
arrange(organization_name) %>%
pull(EIN) %>%
unique()
crossref %>%
pivot_longer(cols = contains("difference")) %>%
select(EIN, fiscal_year, name, value) %>%
filter(value != 0) %>%
left_join(companies_to_ein, by = c("EIN" = "EIN")) %>%
mutate(year = substr(name, nchar(name), nchar(name)),
year = paste0("Comparing Current<br> Year Minus ",
year)) %>%
arrange(organization_name) %>%
select(`Organization Name` = organization_name,
`Difference in Years` = year,
`Fiscal Year` = fiscal_year,
`Recent  - Previously Reported` = value) %>%
make_table(title = paste0(
"Comparing Values Reported in More Recent Report to Those Previously Reported:<br>",
"<i>Number of Companies that have at Least One Report Not Concordant: </i>",
length(companies_different)),
digits = 3,
format.args = list(
big.mark = ",",
scientific = FALSE),
escape=FALSE,
booktabs=TRUE)  %>%
scroll_box(height = "450px",
width = "100%")
# iterate through EINs where there was discordance and
# generate a table so we can better see what's going on
variable_name <- "BeginningYearBalanceAmt"
walk(1:length(companies_different), ~{
name <- companies_to_ein %>%
filter(EIN == companies_different[.x]) %>%
pull(organization_name)
table <- crossref %>%
rename_with(cols=everything(), ~gsub(variable_name, "", .)) %>%
filter(EIN %in% companies_different[.x]) %>%
select(-c(EIN, contains("difference"))) %>%
make_table(title = paste0("Reports for ",
name, "<br>EIN: ",
companies_different[.x],
", Variable: ", variable_name))
print(table)
#  print(table)
})
crossref %>%
pivot_longer(cols = contains("difference")) %>%
select(EIN, fiscal_year, name, value) %>%
# filter(value > 0) %>%
left_join(companies_to_ein, by = c("EIN" = "EIN")) %>%
mutate(year = substr(name, nchar(name), nchar(name)),
year = paste0("Comparing Current Year Minus ",
year)) %>%
arrange(organization_name) %>% View()
variables_to_check  <- endowment_data %>%
select(contains("CY")) %>%
colnames() %>%
gsub("CY|CYM.", "",.) %>%
unique()
crossref_all <- map_df(
variables_to_check,
~{  variable_name <- .x
check_variable(variable_name,
data = endowment_data) %>%
# remove variable name part of column name
# so we can bind rows together, add this information
# as a separate column
rename_with(cols=everything(),
~gsub(variable_name, "", .)) %>%
mutate(variable = .x)
})
variables_to_check  <- endowment_data %>%
select(contains("CY")) %>%
colnames() %>%
gsub("CY|CYM.", "",.) %>%
unique()
crossref_all <- map_df(
variables_to_check,
~{  variable_name <- .x
check_variable(variable_name,
data = endowment_data) %>%
# remove variable name part of column name
# so we can bind rows together, add this information
# as a separate column
rename_with(cols=everything(),
~gsub(variable_name, "", .)) %>%
mutate(variable = .x)
})
